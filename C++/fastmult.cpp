/*******************************************************************************
 * Name        : fastmult.cpp
 * Author      : Michael Lazieh
 * Date        : 11/11/23
 * Description : Karatsuba Fast Multiplication
 * Pledge      : I pledge my honor that I have abided by the Stevens Honor System.
 ******************************************************************************/
#include <iostream>
#include <sstream>
#include <cmath>

using namespace std;

string add(const string& a, const string& b) { 
    string result;
    int carry = 0;

    int i = a.size() - 1;
    int j = b.size() - 1;

    while (i >= 0 || j >= 0 || carry > 0) {
        int digit1 = i>=0 ? a[i--] - '0' : 0;       //This intializes the digits of the strings as individual chars by adding them to '0' so we get their numbers ascii value. Also we can convert them to ints and add them. 
        int digit2 = j>=0 ? b[j--] - '0' : 0;       //If we've iterated through the number, we go straight to int 0.
        int sum = digit1 + digit2 + carry;          
        carry = sum/10;                             //remainder we add to next digit

        result.insert(result.begin(), '0' + (sum % 10));    //Gets char of the last digit by adding it to '0' and adding it to the string.
    }       

    return result;
}

string subtract(const string& a, const string& b) { 
    string result;

    int i = a.size() - 1;
    int j = b.size() - 1;
    int borrow = 0;

    while (i >= 0 || j >= 0) {
        int digit1 = i>=0 ? a[i--] - '0' : 0;       //This intializes the digits of the strings as individual chars by adding them to '0' so we get their numbers ascii value. Also we can convert them to ints and subtract them. 
        int digit2 = j>=0 ? b[j--] - '0' : 0;       //If we've iterated through the number, we go straight to int 0.
        digit1 -= borrow;
        
        if (digit1 < digit2) {                      //If the 1st digit is bigger than the second, we carry a 1 over from the following place.
            digit1 +=10 ; borrow = 1;
        }
        int sub = digit1 - digit2;          

        result.insert(result.begin(), '0' + sub);    //Gets char of the last digit by adding it to '0' and adding it to the string.
    }       

    for (size_t i = 0; i < result.size(); i++) {
        if (result[i] == '0') {result.erase(result.begin());}
        else {break;}
    }

    return result;
}

//100
//7

string multiply(const string& a, const string& b) {
    int size_a = a.size(); int size_b = b.size();
    int result_len = size_a + size_b;
    string result(result_len,'0');  //"0000"

    for (int i = b.size() - 1; i >= 0; i--) {   //0
        int digit2 = b[i] - '0';   //7
        int carry = 0;

        for (int j = a.size() - 1; j >= 0; j--) {   //0
            int digit1 = a[j] - '0';    //1
            int temp = result[i + j + 1] - '0';     //0
            int product = digit1 * digit2 + carry + temp;  //7
            carry = product/10;     //0
            int prin = product%10;      //7

            result[i + j + 1] = prin + '0';   //7 + '0' "0700"
        }

        result[i] = static_cast<char>(carry + '0');

    }

    if (result[0] == '0') {
        return result.substr(1);
    }

    return result;
}


string karatsubaMultiply(const string& x, const string& y) {
    int size_x = x.size(); int size_y = y.size();
    string xcopy = x;
    string ycopy = y;
    
    //base case
    if (size_x == 1 || size_y == 1) {
        return multiply(x, y);
    }

    int n = max(size_x, size_y);

    while (size_x < n) {
        xcopy.insert(xcopy.begin(),'0');
        size_x++;
    }
    while (size_y < n) {
        ycopy.insert(ycopy.begin(),'0');
        size_y++;
    }
    
    //Calculate the size for splitting the input strings
    int first_half = n / 2;     //floor
    int m = n - first_half;

    if (first_half > n) {return karatsubaMultiply(y,x);}

    //Split the input strings into high and low parts
    string xHigh = xcopy.substr(0, first_half);
    string xLow = xcopy.substr(first_half, m);
    string yHigh = ycopy.substr(0, first_half);
    string yLow = ycopy.substr(first_half, m);

    string a = karatsubaMultiply(xHigh, yHigh);
    string d = karatsubaMultiply(xLow, yLow);
    
    // Calculate e without directly subtracting a and d cause of segmentation faults
    string xSum = add(xHigh, xLow);
    string ySum = add(yHigh, yLow);
    string e = karatsubaMultiply(xSum, ySum);
    e = subtract(e, a);
    e = subtract(e, d);

    // Combine the results using the add function
    string result = add(add(a + string(2 * m, '0'), e + string(m, '0')), d);

    // Remove leading zeros
    size_t firstNonZero = result.find_first_not_of('0');
    if (firstNonZero != string::npos) {
        return result.substr(firstNonZero);
    } else {
        return "0";
    }
}



int main(int argc, char *argv[]) {
    //string str
    //string str
    
    string a = argv[1]; string b = argv[2];
    string result = karatsubaMultiply(a, b);
    cout << result << endl;

    return 0;
}